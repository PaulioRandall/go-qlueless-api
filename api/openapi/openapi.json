{
	"openapi": "3.0.2",
	"info": {
		"title": "Go Qlueless Assembly API",
		"version": "0.0.1"
  },
  "tags": [
    {
      "name": "venture",
      "description": "All available venture specific actions."
    }
  ],
	"paths": {
		"/openapi": {
		  "get": {
		    "description": "Returns this OpenAPI specification.",
		    "responses": {
		      "200": {
		        "description": "OpenAPI specification.",
		        "content": {
		          "application/vnd.oai.openapi+json": {
		          }
		        }
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		},
		"/changelog": {
		  "get": {
		    "description": "Returns the API changelog.",
		    "responses": {
		      "200": {
		        "description": "Changelog.",
		        "content": {
		          "text/markdown": {
		          }
		        }
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		},
		"/ventures": {
		  "get": {
		    "tags": ["venture"],
		    "description": "Returns all Ventures.",
		    "parameters": [
		      {
		        "$ref": "#/components/parameters/wrap"
		      },
		      {
		        "$ref": "#/components/parameters/venture_id"
		      }
		    ],
		    "responses": {
		      "200": {
		        "$ref": "#/components/responses/ventures_or_venture_wrappable_200"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  },
		  "post": {
		    "tags": ["venture"],
		    "description": "Creates a new Venture.",
		    "requestBody": {
		      "$ref": "#/components/requestBodies/create_venture"
		    },
		    "responses": {
		      "201": {
		        "$ref": "#/components/responses/venture_200"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  },
		  "put": {
		    "tags": ["venture"],
		    "description": "Updates a Venture.",
		    "requestBody": {
		      "$ref": "#/components/requestBodies/update_venture"
		    },
		    "responses": {
		      "200": {
		        "$ref": "#/components/responses/venture_200"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  },
		  "delete": {
		    "tags": ["venture"],
		    "description": "Deletes a Venture.",
		    "parameters": [
		      {
		        "$ref": "#/components/parameters/venture_id"
		      }
		    ],
		    "responses": {
		      "200": {
		        "$ref": "#/components/responses/venture_200"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		}
  },
	"components": {
    "parameters": {
			"venture_id": {
			  "name": "venture_id",
			  "in": "query",
			  "description": "Unique identifier of a Venture.",
			  "required": false,
			  "schema": {
			    "$ref": "#/components/x-hidden/venture_id"
			  }
			},
			"wrap": {
			  "name": "wrap",
			  "in": "query",
			  "description": "If present wraps the response and adds meta information.",
			  "required": false,
			  "schema": {
			    "type": "string"
			  }
			}
    },
    "requestBodies": {
			"create_venture": {
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/create_venture"
			      }
			    }
			  }
			},
			"update_venture": {
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/update_venture"
			      }
			    }
			  }
			}
    },
    "responses": {
			"ventures_or_venture_wrappable_200": {
			  "description": "List of Ventures or a single Venture.",
			  "content": {
			    "application/json": {
			      "schema": {
			        "oneOf": [
			          {
			            "$ref": "#/components/x-hidden/ventures_wrapped"
			          },
			          {
			            "$ref": "#/components/x-hidden/ventures_array"
			          },
			          {
			            "$ref": "#/components/x-hidden/venture_wrapped"
			          },
			          {
			            "$ref": "#/components/schemas/venture"
			          }
			        ]
			      }
			    }
			  }
			},
			"venture_200": {
			  "description": "Single Venture.",
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/venture"
			      }
			    }
			  }
			},
			"error": {
			  "description": "Client or service error.",
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/error"
			      }
			    }
			  }
			}
    },
		"schemas": {
			"create_venture": {
			  "type": "object",
			  "required": [
			    "description",
			    "state"
			  ],
			  "properties": {
			    "description": {
			      "$ref": "#/components/x-hidden/description"
			    },
			    "state": {
			      "$ref": "#/components/x-hidden/state"
			    },
			    "extra": {
			      "$ref": "#/components/x-hidden/extra"
			    }
			  }
			},
			"update_venture": {
			  "type": "object",
			  "required": [
			    "venture_id",
			    "set",
			    "values"
			  ],
			  "properties": {
			    "venture_id": {
			      "$ref": "#/components/x-hidden/venture_id"
			    },
			    "set": {
			      "type": "array",
			      "description": "List of properties to update.",
			      "items": {
			        "type": "string"
			      }
			    },
			    "values": {
			      "type": "object",
			      "description": "Updated values for the properties.",
			      "properties": {
			        "description": {
			          "$ref": "#/components/x-hidden/description"
			        },
			        "state": {
			          "$ref": "#/components/x-hidden/state"
			        },
			        "is_alive": {
			          "$ref": "#/components/x-hidden/is_alive"
			        },
			        "extra": {
			          "$ref": "#/components/x-hidden/extra"
			        }
			      }
			    }
			  }
			},
			"venture": {
			  "type": "object",
			  "required": [
			    "venture_id",
			    "description",
			    "state"
			  ],
			  "properties": {
			    "venture_id": {
			      "$ref": "#/components/x-hidden/venture_id"
			    },
			    "description": {
			      "$ref": "#/components/x-hidden/description"
			    },
			    "state": {
			      "$ref": "#/components/x-hidden/state"
			    },
			    "is_alive": {
			      "$ref": "#/components/x-hidden/is_alive"
			    },
			    "extra": {
			      "$ref": "#/components/x-hidden/extra"
			    }
			  }
			},
			"error": {
			  "type": "object",
			  "required": [
			    "message",
			    "self"
			  ],
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    }
			  }
			},
			"wrapped_response": {
			  "type": "object",
			  "required": [
			    "message",
			    "self"
			  ],
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "description": "The wrapped response data; should be identical to the response returned by the same request without the `wrap` parameter"
			    }
			  }
			}
    },
    "x-hidden": {
			"ventures_wrapped": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "$ref": "#/components/x-hidden/ventures_array"
			    }
			  }
			},
			"ventures_array": {
			  "type": "array",
			  "items": {
			    "$ref": "#/components/schemas/venture"
			  }
			},
			"venture_wrapped": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "$ref": "#/components/schemas/venture"
			    }
			  }
			},
			"message": {
			  "type": "string",
			  "description": "Human readable summary of the response in a form presentable to end users."
			},
			"self": {
			  "type": "string",
			  "description": "Full path of the URL to the Thing or, if wrapped for meta information, the path of the request URL."
			},
			"venture_id": {
			  "type": "string",
			  "description": "Unique identifier of the Venture."
			},
			"description": {
			  "type": "string",
			  "description": "Presentable and human readable description of the Thing."
			},
			"state": {
			  "type": "string",
			  "description": "State of the Thing."
			},
			"is_alive": {
			  "type": "boolean",
			  "description": "True if the Thing is alive and should be included within search results."
			},
			"extra": {
			  "type": "string",
			  "description": "Semicolon ';' separated list of additional attributes managed by clients. Each property is a key value pair using a colon ':' as the delimiter, i.e. 'key: value'."
			}
    }
	}
}
