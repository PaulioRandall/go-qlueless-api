{
	"openapi": "3.0.2",
	"info": {
		"title": "Go Qlueless Assembly API",
		"version": "0.0.1"
	},
	"paths": {
		"/openapi": {
		  "get": {
		    "description": "Returns this OpenAPI specification.",
		    "responses": {
		      "200": {
		        "description": "OpenAPI specification.",
		        "content": {
		          "application/vnd.oai.openapi+json": {
		          }
		        }
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		},
		"/changelog": {
		  "get": {
		    "description": "Returns the API changelog.",
		    "responses": {
		      "200": {
		        "description": "Changelog.",
		        "content": {
		          "text/markdown": {
		          }
		        }
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		},
		"/things": {
		  "get": {
		    "description": "Returns all things.",
		    "parameters": [
		      {
		        "$ref": "#/components/parameters/wrap"
		      },
		      {
		        "$ref": "#/components/parameters/id"
		      }
		    ],
		    "responses": {
		      "200": {
		        "$ref": "#/components/responses/things_200"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  },
		  "post": {
		    "description": "Creates a new thing.",
		    "requestBody": {
		      "$ref": "#/components/requestBodies/new_thing"
		    },
		    "responses": {
		      "201": {
		        "$ref": "#/components/responses/thing_200_201"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  },
		  "put": {
		    "description": "Updates a thing.",
		    "requestBody": {
		      "$ref": "#/components/requestBodies/thing"
		    },
		    "responses": {
		      "200": {
		        "$ref": "#/components/responses/thing_200_201"
		      },
		      "default": {
		        "$ref": "#/components/responses/error"
		      }
		    }
		  }
		}
  },
	"components": {
    "parameters": {
			"id": {
			  "name": "id",
			  "in": "query",
			  "description": "Unique identifier of a thing",
			  "required": false,
			  "schema": {
			    "$ref": "#/components/x-hidden/id"
			  }
			},
			"wrap": {
			  "name": "wrap",
			  "in": "query",
			  "description": "If present wraps the response and includes meta information to it.",
			  "required": false,
			  "schema": {
			    "type": "string"
			  }
			}
    },
    "requestBodies": {
			"new_thing": {
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/new_thing"
			      }
			    }
			  }
			},
			"thing": {
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/thing"
			      }
			    }
			  }
			}
    },
    "responses": {
			"things_200": {
			  "description": "List of Things or a single Thing.",
			  "content": {
			    "application/json": {
			      "schema": {
			        "oneOf": [
			          {
			            "$ref": "#/components/x-hidden/things_wrapped"
			          },
			          {
			            "$ref": "#/components/x-hidden/things_array"
			          },
			          {
			            "$ref": "#/components/x-hidden/thing_wrapped"
			          },
			          {
			            "$ref": "#/components/schemas/thing"
			          }
			        ]
			      }
			    }
			  }
			},
			"thing_200_201": {
			  "description": "Single thing",
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/thing"
			      }
			    }
			  }
			},
			"error": {
			  "description": "Client or service error.",
			  "content": {
			    "application/json": {
			      "schema": {
			        "$ref": "#/components/schemas/error"
			      }
			    }
			  }
			}
    },
		"schemas": {
			"new_thing": {
			  "type": "object",
			  "required": [
			    "description",
			    "state"
			  ],
			  "properties": {
			    "description": {
			      "$ref": "#/components/x-hidden/description"
			    },
			    "state": {
			      "$ref": "#/components/x-hidden/state"
			    },
			    "child_ids": {
			      "$ref": "#/components/x-hidden/child_ids"
			    },
			    "parent_ids": {
			      "$ref": "#/components/x-hidden/parent_ids"
			    },
			    "is_dead": {
			      "$ref": "#/components/x-hidden/is_dead"
			    },
			    "additional": {
			      "$ref": "#/components/x-hidden/additional"
			    }
			  }
			},
			"thing": {
			  "type": "object",
			  "required": [
			    "description",
			    "id",
			    "state"
			  ],
			  "properties": {
			    "description": {
			      "$ref": "#/components/x-hidden/description"
			    },
			    "id": {
			      "$ref": "#/components/x-hidden/id"
			    },
			    "state": {
			      "$ref": "#/components/x-hidden/state"
			    },
			    "child_ids": {
			      "$ref": "#/components/x-hidden/child_ids"
			    },
			    "parent_ids": {
			      "$ref": "#/components/x-hidden/parent_ids"
			    },
			    "additional": {
			      "$ref": "#/components/x-hidden/additional"
			    }
			  }
			},
			"error": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    }
			  }
			},
			"wrapped_response": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "description": "The wrapped response data; should be identical to the response returned by the same request without the `meta` parameter"
			    }
			  }
			}
    },
    "x-hidden": {
			"things_wrapped": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "$ref": "#/components/x-hidden/things_array"
			    }
			  }
			},
			"things_array": {
			  "type": "array",
			  "items": {
			    "$ref": "#/components/schemas/thing"
			  }
			},
			"thing_wrapped": {
			  "type": "object",
			  "properties": {
			    "message": {
			      "$ref": "#/components/x-hidden/message"
			    },
			    "self": {
			      "$ref": "#/components/x-hidden/self"
			    },
			    "data": {
			      "$ref": "#/components/schemas/thing"
			    }
			  }
			},
			"message": {
			  "type": "string",
			  "description": "Human readable summary of the response in a form presentable to end users."
			},
			"self": {
			  "type": "string",
			  "description": "Full path of the URL to the entity or, if wrapped for meta information, the path of the request URL."
			},
			"description": {
			  "type": "string",
			  "description": "Presentable and human readable description of the entity instance."
			},
			"id": {
			  "type": "string",
			  "description": "Unique identifier of the Thing."
			},
			"child_ids": {
			  "type": "string",
			  "format": "csv",
			  "description": "CSV of IDs that identify Things that this Thing is a parent of."
			},
			"parent_ids": {
			  "type": "string",
			  "format": "csv",
			  "description": "CSV of IDs that identify Things that this Thing is a child of."
			},
			"state": {
			  "type": "string",
			  "description": "State of a thing."
			},
			"is_dead": {
			  "type": "boolean",
			  "description": "True if the thing is dead and should not show up in searches."
			},
			"additional": {
			  "type": "string",
			  "description": "Semicolon ';' separated list of additional attributes managed by clients. Each property is a key value pair using a colon ':' as the delimiter, i.e. 'key: value'."
			}
    }
	}
}
